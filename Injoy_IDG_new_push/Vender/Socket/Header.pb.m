// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "Header.pb.h"
// @@protoc_insertion_point(imports)

@implementation HeaderRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [HeaderRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface Attachment ()
@property (strong) NSString* key;
@property (strong) NSData* value;
@end

@implementation Attachment

- (BOOL) hasKey {
  return !!hasKey_;
}
- (void) setHasKey:(BOOL) _value_ {
  hasKey_ = !!_value_;
}
@synthesize key;
- (BOOL) hasValue {
  return !!hasValue_;
}
- (void) setHasValue:(BOOL) _value_ {
  hasValue_ = !!_value_;
}
@synthesize value;
- (instancetype) init {
  if ((self = [super init])) {
    self.key = @"";
    self.value = [NSData data];
  }
  return self;
}
static Attachment* defaultAttachmentInstance = nil;
+ (void) initialize {
  if (self == [Attachment class]) {
    defaultAttachmentInstance = [[Attachment alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultAttachmentInstance;
}
- (instancetype) defaultInstance {
  return defaultAttachmentInstance;
}
- (BOOL) isInitialized {
  if (!self.hasKey) {
    return NO;
  }
  if (!self.hasValue) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasKey) {
    [output writeString:1 value:self.key];
  }
  if (self.hasValue) {
    [output writeData:2 value:self.value];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasKey) {
    size_ += computeStringSize(1, self.key);
  }
  if (self.hasValue) {
    size_ += computeDataSize(2, self.value);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (Attachment*) parseFromData:(NSData*) data {
  return (Attachment*)[[[Attachment builder] mergeFromData:data] build];
}
+ (Attachment*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Attachment*)[[[Attachment builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Attachment*) parseFromInputStream:(NSInputStream*) input {
  return (Attachment*)[[[Attachment builder] mergeFromInputStream:input] build];
}
+ (Attachment*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Attachment*)[[[Attachment builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Attachment*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Attachment*)[[[Attachment builder] mergeFromCodedInputStream:input] build];
}
+ (Attachment*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Attachment*)[[[Attachment builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (AttachmentBuilder*) builder {
  return [[AttachmentBuilder alloc] init];
}
+ (AttachmentBuilder*) builderWithPrototype:(Attachment*) prototype {
  return [[Attachment builder] mergeFrom:prototype];
}
- (AttachmentBuilder*) builder {
  return [Attachment builder];
}
- (AttachmentBuilder*) toBuilder {
  return [Attachment builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasKey) {
    [output appendFormat:@"%@%@: %@\n", indent, @"key", self.key];
  }
  if (self.hasValue) {
    [output appendFormat:@"%@%@: %@\n", indent, @"value", self.value];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasKey) {
    [dictionary setObject: self.key forKey: @"key"];
  }
  if (self.hasValue) {
    [dictionary setObject: self.value forKey: @"value"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Attachment class]]) {
    return NO;
  }
  Attachment *otherMessage = other;
  return
      self.hasKey == otherMessage.hasKey &&
      (!self.hasKey || [self.key isEqual:otherMessage.key]) &&
      self.hasValue == otherMessage.hasValue &&
      (!self.hasValue || [self.value isEqual:otherMessage.value]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasKey) {
    hashCode = hashCode * 31 + [self.key hash];
  }
  if (self.hasValue) {
    hashCode = hashCode * 31 + [self.value hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface AttachmentBuilder()
@property (strong) Attachment* resultAttachment;
@end

@implementation AttachmentBuilder
@synthesize resultAttachment;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultAttachment = [[Attachment alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultAttachment;
}
- (AttachmentBuilder*) clear {
  self.resultAttachment = [[Attachment alloc] init];
  return self;
}
- (AttachmentBuilder*) clone {
  return [Attachment builderWithPrototype:resultAttachment];
}
- (Attachment*) defaultInstance {
  return [Attachment defaultInstance];
}
- (Attachment*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Attachment*) buildPartial {
  Attachment* returnMe = resultAttachment;
  self.resultAttachment = nil;
  return returnMe;
}
- (AttachmentBuilder*) mergeFrom:(Attachment*) other {
  if (other == [Attachment defaultInstance]) {
    return self;
  }
  if (other.hasKey) {
    [self setKey:other.key];
  }
  if (other.hasValue) {
    [self setValue:other.value];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (AttachmentBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (AttachmentBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setKey:[input readString]];
        break;
      }
      case 18: {
        [self setValue:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasKey {
  return resultAttachment.hasKey;
}
- (NSString*) key {
  return resultAttachment.key;
}
- (AttachmentBuilder*) setKey:(NSString*) value {
  resultAttachment.hasKey = YES;
  resultAttachment.key = value;
  return self;
}
- (AttachmentBuilder*) clearKey {
  resultAttachment.hasKey = NO;
  resultAttachment.key = @"";
  return self;
}
- (BOOL) hasValue {
  return resultAttachment.hasValue;
}
- (NSData*) value {
  return resultAttachment.value;
}
- (AttachmentBuilder*) setValue:(NSData*) value {
  resultAttachment.hasValue = YES;
  resultAttachment.value = value;
  return self;
}
- (AttachmentBuilder*) clearValue {
  resultAttachment.hasValue = NO;
  resultAttachment.value = [NSData data];
  return self;
}
@end

@interface Header ()
@property SInt32 crcCode;
@property SInt64 messageId;
@property (strong) NSData* type;
@property (strong) NSData* priority;
@property (strong) NSString* pb_from;
@property (strong) NSString* to;
@property SInt64 groupId;
@property (strong) NSString* password;
@property SInt32 socketType;
@property (strong) NSMutableArray * attachmentArray;
@end

@implementation Header

- (BOOL) hasCrcCode {
  return !!hasCrcCode_;
}
- (void) setHasCrcCode:(BOOL) _value_ {
  hasCrcCode_ = !!_value_;
}
@synthesize crcCode;
- (BOOL) hasMessageId {
  return !!hasMessageId_;
}
- (void) setHasMessageId:(BOOL) _value_ {
  hasMessageId_ = !!_value_;
}
@synthesize messageId;
- (BOOL) hasType {
  return !!hasType_;
}
- (void) setHasType:(BOOL) _value_ {
  hasType_ = !!_value_;
}
@synthesize type;
- (BOOL) hasPriority {
  return !!hasPriority_;
}
- (void) setHasPriority:(BOOL) _value_ {
  hasPriority_ = !!_value_;
}
@synthesize priority;
- (BOOL) hasFrom {
  return !!hasFrom_;
}
- (void) setHasFrom:(BOOL) _value_ {
  hasFrom_ = !!_value_;
}
@synthesize pb_from;
- (BOOL) hasTo {
  return !!hasTo_;
}
- (void) setHasTo:(BOOL) _value_ {
  hasTo_ = !!_value_;
}
@synthesize to;
- (BOOL) hasGroupId {
  return !!hasGroupId_;
}
- (void) setHasGroupId:(BOOL) _value_ {
  hasGroupId_ = !!_value_;
}
@synthesize groupId;
- (BOOL) hasPassword {
  return !!hasPassword_;
}
- (void) setHasPassword:(BOOL) _value_ {
  hasPassword_ = !!_value_;
}
@synthesize password;
- (BOOL) hasSocketType {
  return !!hasSocketType_;
}
- (void) setHasSocketType:(BOOL) _value_ {
  hasSocketType_ = !!_value_;
}
@synthesize socketType;
@synthesize attachmentArray;
@dynamic attachment;
- (instancetype) init {
  if ((self = [super init])) {
    self.crcCode = 0;
    self.messageId = 0L;
    self.type = [NSData data];
    self.priority = [NSData data];
    self.pb_from = @"";
    self.to = @"";
    self.groupId = 0L;
    self.password = @"";
    self.socketType = 0;
  }
  return self;
}
static Header* defaultHeaderInstance = nil;
+ (void) initialize {
  if (self == [Header class]) {
    defaultHeaderInstance = [[Header alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultHeaderInstance;
}
- (instancetype) defaultInstance {
  return defaultHeaderInstance;
}
- (NSArray *)attachment {
  return attachmentArray;
}
- (Attachment*)attachmentAtIndex:(NSUInteger)index {
  return [attachmentArray objectAtIndex:index];
}
- (BOOL) isInitialized {
  if (!self.hasCrcCode) {
    return NO;
  }
  if (!self.hasType) {
    return NO;
  }
  __block BOOL isInitattachment = YES;
   [self.attachment enumerateObjectsUsingBlock:^(Attachment *element, NSUInteger idx, BOOL *stop) {
    if (!element.isInitialized) {
      isInitattachment = NO;
      *stop = YES;
    }
  }];
  if (!isInitattachment) return isInitattachment;
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasCrcCode) {
    [output writeSFixed32:1 value:self.crcCode];
  }
  if (self.hasMessageId) {
    [output writeSFixed64:2 value:self.messageId];
  }
  if (self.hasType) {
    [output writeData:3 value:self.type];
  }
  if (self.hasPriority) {
    [output writeData:4 value:self.priority];
  }
  if (self.hasFrom) {
    [output writeString:5 value:self.pb_from];
  }
  if (self.hasTo) {
    [output writeString:6 value:self.to];
  }
  if (self.hasGroupId) {
    [output writeSFixed64:7 value:self.groupId];
  }
  if (self.hasPassword) {
    [output writeString:8 value:self.password];
  }
  if (self.hasSocketType) {
    [output writeSFixed32:9 value:self.socketType];
  }
  [self.attachmentArray enumerateObjectsUsingBlock:^(Attachment *element, NSUInteger idx, BOOL *stop) {
    [output writeMessage:10 value:element];
  }];
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasCrcCode) {
    size_ += computeSFixed32Size(1, self.crcCode);
  }
  if (self.hasMessageId) {
    size_ += computeSFixed64Size(2, self.messageId);
  }
  if (self.hasType) {
    size_ += computeDataSize(3, self.type);
  }
  if (self.hasPriority) {
    size_ += computeDataSize(4, self.priority);
  }
  if (self.hasFrom) {
    size_ += computeStringSize(5, self.pb_from);
  }
  if (self.hasTo) {
    size_ += computeStringSize(6, self.to);
  }
  if (self.hasGroupId) {
    size_ += computeSFixed64Size(7, self.groupId);
  }
  if (self.hasPassword) {
    size_ += computeStringSize(8, self.password);
  }
  if (self.hasSocketType) {
    size_ += computeSFixed32Size(9, self.socketType);
  }
  [self.attachmentArray enumerateObjectsUsingBlock:^(Attachment *element, NSUInteger idx, BOOL *stop) {
    size_ += computeMessageSize(10, element);
  }];
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (Header*) parseFromData:(NSData*) data {
  return (Header*)[[[Header builder] mergeFromData:data] build];
}
+ (Header*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Header*)[[[Header builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (Header*) parseFromInputStream:(NSInputStream*) input {
  return (Header*)[[[Header builder] mergeFromInputStream:input] build];
}
+ (Header*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Header*)[[[Header builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (Header*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (Header*)[[[Header builder] mergeFromCodedInputStream:input] build];
}
+ (Header*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (Header*)[[[Header builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (HeaderBuilder*) builder {
  return [[HeaderBuilder alloc] init];
}
+ (HeaderBuilder*) builderWithPrototype:(Header*) prototype {
  return [[Header builder] mergeFrom:prototype];
}
- (HeaderBuilder*) builder {
  return [Header builder];
}
- (HeaderBuilder*) toBuilder {
  return [Header builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasCrcCode) {
    [output appendFormat:@"%@%@: %@\n", indent, @"crcCode", [NSNumber numberWithInteger:self.crcCode]];
  }
  if (self.hasMessageId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"messageId", [NSNumber numberWithLongLong:self.messageId]];
  }
  if (self.hasType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"type", self.type];
  }
  if (self.hasPriority) {
    [output appendFormat:@"%@%@: %@\n", indent, @"priority", self.priority];
  }
  if (self.hasFrom) {
    [output appendFormat:@"%@%@: %@\n", indent, @"pb_from", self.pb_from];
  }
  if (self.hasTo) {
    [output appendFormat:@"%@%@: %@\n", indent, @"to", self.to];
  }
  if (self.hasGroupId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"groupId", [NSNumber numberWithLongLong:self.groupId]];
  }
  if (self.hasPassword) {
    [output appendFormat:@"%@%@: %@\n", indent, @"password", self.password];
  }
  if (self.hasSocketType) {
    [output appendFormat:@"%@%@: %@\n", indent, @"socketType", [NSNumber numberWithInteger:self.socketType]];
  }
  [self.attachmentArray enumerateObjectsUsingBlock:^(Attachment *element, NSUInteger idx, BOOL *stop) {
    [output appendFormat:@"%@%@ {\n", indent, @"attachment"];
    [element writeDescriptionTo:output
                     withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }];
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasCrcCode) {
    [dictionary setObject: [NSNumber numberWithInteger:self.crcCode] forKey: @"crcCode"];
  }
  if (self.hasMessageId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.messageId] forKey: @"messageId"];
  }
  if (self.hasType) {
    [dictionary setObject: self.type forKey: @"type"];
  }
  if (self.hasPriority) {
    [dictionary setObject: self.priority forKey: @"priority"];
  }
  if (self.hasFrom) {
    [dictionary setObject: self.pb_from forKey: @"pb_from"];
  }
  if (self.hasTo) {
    [dictionary setObject: self.to forKey: @"to"];
  }
  if (self.hasGroupId) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.groupId] forKey: @"groupId"];
  }
  if (self.hasPassword) {
    [dictionary setObject: self.password forKey: @"password"];
  }
  if (self.hasSocketType) {
    [dictionary setObject: [NSNumber numberWithInteger:self.socketType] forKey: @"socketType"];
  }
  for (Attachment* element in self.attachmentArray) {
    NSMutableDictionary *elementDictionary = [NSMutableDictionary dictionary];
    [element storeInDictionary:elementDictionary];
    [dictionary setObject:[NSDictionary dictionaryWithDictionary:elementDictionary] forKey:@"attachment"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[Header class]]) {
    return NO;
  }
  Header *otherMessage = other;
  return
      self.hasCrcCode == otherMessage.hasCrcCode &&
      (!self.hasCrcCode || self.crcCode == otherMessage.crcCode) &&
      self.hasMessageId == otherMessage.hasMessageId &&
      (!self.hasMessageId || self.messageId == otherMessage.messageId) &&
      self.hasType == otherMessage.hasType &&
      (!self.hasType || [self.type isEqual:otherMessage.type]) &&
      self.hasPriority == otherMessage.hasPriority &&
      (!self.hasPriority || [self.priority isEqual:otherMessage.priority]) &&
      self.hasFrom == otherMessage.hasFrom &&
      (!self.hasFrom || [self.pb_from isEqual:otherMessage.pb_from]) &&
      self.hasTo == otherMessage.hasTo &&
      (!self.hasTo || [self.to isEqual:otherMessage.to]) &&
      self.hasGroupId == otherMessage.hasGroupId &&
      (!self.hasGroupId || self.groupId == otherMessage.groupId) &&
      self.hasPassword == otherMessage.hasPassword &&
      (!self.hasPassword || [self.password isEqual:otherMessage.password]) &&
      self.hasSocketType == otherMessage.hasSocketType &&
      (!self.hasSocketType || self.socketType == otherMessage.socketType) &&
      [self.attachmentArray isEqualToArray:otherMessage.attachmentArray] &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasCrcCode) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.crcCode] hash];
  }
  if (self.hasMessageId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.messageId] hash];
  }
  if (self.hasType) {
    hashCode = hashCode * 31 + [self.type hash];
  }
  if (self.hasPriority) {
    hashCode = hashCode * 31 + [self.priority hash];
  }
  if (self.hasFrom) {
    hashCode = hashCode * 31 + [self.pb_from hash];
  }
  if (self.hasTo) {
    hashCode = hashCode * 31 + [self.to hash];
  }
  if (self.hasGroupId) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.groupId] hash];
  }
  if (self.hasPassword) {
    hashCode = hashCode * 31 + [self.password hash];
  }
  if (self.hasSocketType) {
    hashCode = hashCode * 31 + [[NSNumber numberWithInteger:self.socketType] hash];
  }
  [self.attachmentArray enumerateObjectsUsingBlock:^(Attachment *element, NSUInteger idx, BOOL *stop) {
    hashCode = hashCode * 31 + [element hash];
  }];
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface HeaderBuilder()
@property (strong) Header* resultHeader;
@end

@implementation HeaderBuilder
@synthesize resultHeader;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultHeader = [[Header alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultHeader;
}
- (HeaderBuilder*) clear {
  self.resultHeader = [[Header alloc] init];
  return self;
}
- (HeaderBuilder*) clone {
  return [Header builderWithPrototype:resultHeader];
}
- (Header*) defaultInstance {
  return [Header defaultInstance];
}
- (Header*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (Header*) buildPartial {
  Header* returnMe = resultHeader;
  self.resultHeader = nil;
  return returnMe;
}
- (HeaderBuilder*) mergeFrom:(Header*) other {
  if (other == [Header defaultInstance]) {
    return self;
  }
  if (other.hasCrcCode) {
    [self setCrcCode:other.crcCode];
  }
  if (other.hasMessageId) {
    [self setMessageId:other.messageId];
  }
  if (other.hasType) {
    [self setType:other.type];
  }
  if (other.hasPriority) {
    [self setPriority:other.priority];
  }
  if (other.hasFrom) {
    [self setFrom:other.pb_from];
  }
  if (other.hasTo) {
    [self setTo:other.to];
  }
  if (other.hasGroupId) {
    [self setGroupId:other.groupId];
  }
  if (other.hasPassword) {
    [self setPassword:other.password];
  }
  if (other.hasSocketType) {
    [self setSocketType:other.socketType];
  }
  if (other.attachmentArray.count > 0) {
    if (resultHeader.attachmentArray == nil) {
      resultHeader.attachmentArray = [[NSMutableArray alloc] initWithArray:other.attachmentArray];
    } else {
      [resultHeader.attachmentArray addObjectsFromArray:other.attachmentArray];
    }
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (HeaderBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (HeaderBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 13: {
        [self setCrcCode:[input readSFixed32]];
        break;
      }
      case 17: {
        [self setMessageId:[input readSFixed64]];
        break;
      }
      case 26: {
        [self setType:[input readData]];
        break;
      }
      case 34: {
        [self setPriority:[input readData]];
        break;
      }
      case 42: {
        [self setFrom:[input readString]];
        break;
      }
      case 50: {
        [self setTo:[input readString]];
        break;
      }
      case 57: {
        [self setGroupId:[input readSFixed64]];
        break;
      }
      case 66: {
        [self setPassword:[input readString]];
        break;
      }
      case 77: {
        [self setSocketType:[input readSFixed32]];
        break;
      }
      case 82: {
        AttachmentBuilder* subBuilder = [Attachment builder];
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self addAttachment:[subBuilder buildPartial]];
        break;
      }
    }
  }
}
- (BOOL) hasCrcCode {
  return resultHeader.hasCrcCode;
}
- (SInt32) crcCode {
  return resultHeader.crcCode;
}
- (HeaderBuilder*) setCrcCode:(SInt32) value {
  resultHeader.hasCrcCode = YES;
  resultHeader.crcCode = value;
  return self;
}
- (HeaderBuilder*) clearCrcCode {
  resultHeader.hasCrcCode = NO;
  resultHeader.crcCode = 0;
  return self;
}
- (BOOL) hasMessageId {
  return resultHeader.hasMessageId;
}
- (SInt64) messageId {
  return resultHeader.messageId;
}
- (HeaderBuilder*) setMessageId:(SInt64) value {
  resultHeader.hasMessageId = YES;
  resultHeader.messageId = value;
  return self;
}
- (HeaderBuilder*) clearMessageId {
  resultHeader.hasMessageId = NO;
  resultHeader.messageId = 0L;
  return self;
}
- (BOOL) hasType {
  return resultHeader.hasType;
}
- (NSData*) type {
  return resultHeader.type;
}
- (HeaderBuilder*) setType:(NSData*) value {
  resultHeader.hasType = YES;
  resultHeader.type = value;
  return self;
}
- (HeaderBuilder*) clearType {
  resultHeader.hasType = NO;
  resultHeader.type = [NSData data];
  return self;
}
- (BOOL) hasPriority {
  return resultHeader.hasPriority;
}
- (NSData*) priority {
  return resultHeader.priority;
}
- (HeaderBuilder*) setPriority:(NSData*) value {
  resultHeader.hasPriority = YES;
  resultHeader.priority = value;
  return self;
}
- (HeaderBuilder*) clearPriority {
  resultHeader.hasPriority = NO;
  resultHeader.priority = [NSData data];
  return self;
}
- (BOOL) hasFrom {
  return resultHeader.hasFrom;
}
- (NSString*) pb_from {
  return resultHeader.pb_from;
}
- (HeaderBuilder*) setFrom:(NSString*) value {
  resultHeader.hasFrom = YES;
  resultHeader.pb_from = value;
  return self;
}
- (HeaderBuilder*) clearFrom {
  resultHeader.hasFrom = NO;
  resultHeader.pb_from = @"";
  return self;
}
- (BOOL) hasTo {
  return resultHeader.hasTo;
}
- (NSString*) to {
  return resultHeader.to;
}
- (HeaderBuilder*) setTo:(NSString*) value {
  resultHeader.hasTo = YES;
  resultHeader.to = value;
  return self;
}
- (HeaderBuilder*) clearTo {
  resultHeader.hasTo = NO;
  resultHeader.to = @"";
  return self;
}
- (BOOL) hasGroupId {
  return resultHeader.hasGroupId;
}
- (SInt64) groupId {
  return resultHeader.groupId;
}
- (HeaderBuilder*) setGroupId:(SInt64) value {
  resultHeader.hasGroupId = YES;
  resultHeader.groupId = value;
  return self;
}
- (HeaderBuilder*) clearGroupId {
  resultHeader.hasGroupId = NO;
  resultHeader.groupId = 0L;
  return self;
}
- (BOOL) hasPassword {
  return resultHeader.hasPassword;
}
- (NSString*) password {
  return resultHeader.password;
}
- (HeaderBuilder*) setPassword:(NSString*) value {
  resultHeader.hasPassword = YES;
  resultHeader.password = value;
  return self;
}
- (HeaderBuilder*) clearPassword {
  resultHeader.hasPassword = NO;
  resultHeader.password = @"";
  return self;
}
- (BOOL) hasSocketType {
  return resultHeader.hasSocketType;
}
- (SInt32) socketType {
  return resultHeader.socketType;
}
- (HeaderBuilder*) setSocketType:(SInt32) value {
  resultHeader.hasSocketType = YES;
  resultHeader.socketType = value;
  return self;
}
- (HeaderBuilder*) clearSocketType {
  resultHeader.hasSocketType = NO;
  resultHeader.socketType = 0;
  return self;
}
- (NSMutableArray *)attachment {
  return resultHeader.attachmentArray;
}
- (Attachment*)attachmentAtIndex:(NSUInteger)index {
  return [resultHeader attachmentAtIndex:index];
}
- (HeaderBuilder *)addAttachment:(Attachment*)value {
  if (resultHeader.attachmentArray == nil) {
    resultHeader.attachmentArray = [[NSMutableArray alloc]init];
  }
  [resultHeader.attachmentArray addObject:value];
  return self;
}
- (HeaderBuilder *)setAttachmentArray:(NSArray *)array {
  resultHeader.attachmentArray = [[NSMutableArray alloc]initWithArray:array];
  return self;
}
- (HeaderBuilder *)clearAttachment {
  resultHeader.attachmentArray = nil;
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
