// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "IMMessage.pb.h"
// @@protoc_insertion_point(imports)

@implementation ImmessageRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [ImmessageRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [HeaderRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface IMMessage ()
@property (strong) Header* header;
@property (strong) NSData* body;
@end

@implementation IMMessage

- (BOOL) hasHeader {
  return !!hasHeader_;
}
- (void) setHasHeader:(BOOL) _value_ {
  hasHeader_ = !!_value_;
}
@synthesize header;
- (BOOL) hasBody {
  return !!hasBody_;
}
- (void) setHasBody:(BOOL) _value_ {
  hasBody_ = !!_value_;
}
@synthesize body;
- (instancetype) init {
  if ((self = [super init])) {
    self.header = [Header defaultInstance];
    self.body = [NSData data];
  }
  return self;
}
static IMMessage* defaultIMMessageInstance = nil;
+ (void) initialize {
  if (self == [IMMessage class]) {
    defaultIMMessageInstance = [[IMMessage alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultIMMessageInstance;
}
- (instancetype) defaultInstance {
  return defaultIMMessageInstance;
}
- (BOOL) isInitialized {
  if (!self.hasHeader) {
    return NO;
  }
  if (!self.header.isInitialized) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasHeader) {
    [output writeMessage:1 value:self.header];
  }
  if (self.hasBody) {
    [output writeData:2 value:self.body];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasHeader) {
    size_ += computeMessageSize(1, self.header);
  }
  if (self.hasBody) {
    size_ += computeDataSize(2, self.body);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (IMMessage*) parseFromData:(NSData*) data {
  return (IMMessage*)[[[IMMessage builder] mergeFromData:data] build];
}
+ (IMMessage*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMMessage*)[[[IMMessage builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (IMMessage*) parseFromInputStream:(NSInputStream*) input {
  return (IMMessage*)[[[IMMessage builder] mergeFromInputStream:input] build];
}
+ (IMMessage*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMMessage*)[[[IMMessage builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (IMMessage*)[[[IMMessage builder] mergeFromCodedInputStream:input] build];
}
+ (IMMessage*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (IMMessage*)[[[IMMessage builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (IMMessageBuilder*) builder {
  return [[IMMessageBuilder alloc] init];
}
+ (IMMessageBuilder*) builderWithPrototype:(IMMessage*) prototype {
  return [[IMMessage builder] mergeFrom:prototype];
}
- (IMMessageBuilder*) builder {
  return [IMMessage builder];
}
- (IMMessageBuilder*) toBuilder {
  return [IMMessage builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasHeader) {
    [output appendFormat:@"%@%@ {\n", indent, @"header"];
    [self.header writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasBody) {
    [output appendFormat:@"%@%@: %@\n", indent, @"body", self.body];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasHeader) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.header storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"header"];
  }
  if (self.hasBody) {
    [dictionary setObject: self.body forKey: @"body"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[IMMessage class]]) {
    return NO;
  }
  IMMessage *otherMessage = other;
  return
      self.hasHeader == otherMessage.hasHeader &&
      (!self.hasHeader || [self.header isEqual:otherMessage.header]) &&
      self.hasBody == otherMessage.hasBody &&
      (!self.hasBody || [self.body isEqual:otherMessage.body]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasHeader) {
    hashCode = hashCode * 31 + [self.header hash];
  }
  if (self.hasBody) {
    hashCode = hashCode * 31 + [self.body hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface IMMessageBuilder()
@property (strong) IMMessage* resultImmessage;
@end

@implementation IMMessageBuilder
@synthesize resultImmessage;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultImmessage = [[IMMessage alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultImmessage;
}
- (IMMessageBuilder*) clear {
  self.resultImmessage = [[IMMessage alloc] init];
  return self;
}
- (IMMessageBuilder*) clone {
  return [IMMessage builderWithPrototype:resultImmessage];
}
- (IMMessage*) defaultInstance {
  return [IMMessage defaultInstance];
}
- (IMMessage*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (IMMessage*) buildPartial {
  IMMessage* returnMe = resultImmessage;
  self.resultImmessage = nil;
  return returnMe;
}
- (IMMessageBuilder*) mergeFrom:(IMMessage*) other {
  if (other == [IMMessage defaultInstance]) {
    return self;
  }
  if (other.hasHeader) {
    [self mergeHeader:other.header];
  }
  if (other.hasBody) {
    [self setBody:other.body];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (IMMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (IMMessageBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        HeaderBuilder* subBuilder = [Header builder];
        if (self.hasHeader) {
          [subBuilder mergeFrom:self.header];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setHeader:[subBuilder buildPartial]];
        break;
      }
      case 18: {
        [self setBody:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasHeader {
  return resultImmessage.hasHeader;
}
- (Header*) header {
  return resultImmessage.header;
}
- (IMMessageBuilder*) setHeader:(Header*) value {
  resultImmessage.hasHeader = YES;
  resultImmessage.header = value;
  return self;
}
- (IMMessageBuilder*) setHeaderBuilder:(HeaderBuilder*) builderForValue {
  return [self setHeader:[builderForValue build]];
}
- (IMMessageBuilder*) mergeHeader:(Header*) value {
  if (resultImmessage.hasHeader &&
      resultImmessage.header != [Header defaultInstance]) {
    resultImmessage.header =
      [[[Header builderWithPrototype:resultImmessage.header] mergeFrom:value] buildPartial];
  } else {
    resultImmessage.header = value;
  }
  resultImmessage.hasHeader = YES;
  return self;
}
- (IMMessageBuilder*) clearHeader {
  resultImmessage.hasHeader = NO;
  resultImmessage.header = [Header defaultInstance];
  return self;
}
- (BOOL) hasBody {
  return resultImmessage.hasBody;
}
- (NSData*) body {
  return resultImmessage.body;
}
- (IMMessageBuilder*) setBody:(NSData*) value {
  resultImmessage.hasBody = YES;
  resultImmessage.body = value;
  return self;
}
- (IMMessageBuilder*) clearBody {
  resultImmessage.hasBody = NO;
  resultImmessage.body = [NSData data];
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
